.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::File::ShareDir 3pm"
.TH Test::File::ShareDir 3pm "2013-02-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::File::ShareDir \- Create a Fake ShareDir for your modules for testing.
.SH "VERSION"
.IX Header "VERSION"
version 0.3.1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::More;
\&
\&    # use FindBin; optional
\&
\&    use Test::File::ShareDir
\&        # \-root => "$FindBin::Bin/../" # optional,
\&        \-share => {
\&            \-module => { \*(AqMy::Module\*(Aq => \*(Aqshare/MyModule\*(Aq }
\&            \-dist   => { \*(AqMy\-Dist\*(Aq    => \*(Aqshare/somefolder\*(Aq }
\&        };
\&
\&    use My::Module;
\&
\&    use File::ShareDir qw( module_dir dist_dir );
\&
\&    module_dir( \*(AqMy::Module\*(Aq ) # dir with files from $dist/share/MyModule
\&
\&    dist_dir( \*(AqMy\-Dist\*(Aq ) # dir with files from $dist/share/somefolder
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module only has support for creating 'new' style share dirs and are \s-1NOT\s0 compatible with old File::ShareDirs.
.PP
For this reason, unless you have File::ShareDir 1.00 or later installed, this module will not be usable by you.
.SH "IMPORTING"
.IX Header "IMPORTING"
.SS "\-root"
.IX Subsection "-root"
This parameter is the prefix the other paths are relative to.
.PP
If this parameter is not specified, it defaults to the Current Working Directory ( \f(CW\*(C`CWD\*(C'\fR ).
.PP
In versions prior to \f(CW0.3.0\fR, this value was mandatory.
.PP
The rationale behind using \f(CW\*(C`CWD\*(C'\fR as the default value is as follows.
.IP "\(bu" 4
Most users of this module are likely to be using it to test distributions
.IP "\(bu" 4
Most users of this module will be using it in \f(CW\*(C`$project/t/\*(C'\fR to load files from \f(CW\*(C`$project/share/\*(C'\fR
.IP "\(bu" 4
Most \f(CW\*(C`CPAN\*(C'\fR tools run tests with \f(CW\*(C`CWD\*(C'\fR = \f(CW$project\fR
.PP
Therefor, defaulting to \f(CW\*(C`CWD\*(C'\fR is a reasonably sane default for most people, but where it is not it can
still be overridden.
.PP
.Vb 1
\&  \-root => "$FindBin::Bin/../" # resolves to project root from t/ regardless of Cwd.
.Ve
.SS "\-share"
.IX Subsection "-share"
This parameter is mandatory, and contains a \f(CW\*(C`hashref\*(C'\fR containing the data that explains what directories you want shared.
.PP
.Vb 1
\&  \-share =>  { ..... }
.Ve
.PP
\fI\-module\fR
.IX Subsection "-module"
.PP
\&\f(CW\*(C`\-module\*(C'\fR contains a \f(CW\*(C`hashref\*(C'\fR mapping Module names to path names for module_dir style share dirs.
.PP
.Vb 3
\&  \-share => {
\&    \-module => { \*(AqMy::Module\*(Aq => \*(Aqshare/mymodule/\*(Aq, }
\&  }
\&
\&  ...
\&
\&  module_dir(\*(AqMy::Module\*(Aq)
.Ve
.PP
Notedly, it is a \f(CW\*(C`hashref\*(C'\fR, which means there is a limitation of one share dir per module. This is simply because having more than one share dir per module makes no sense at all.
.PP
\fI\-dist\fR
.IX Subsection "-dist"
.PP
\&\f(CW\*(C`\-dist\*(C'\fR contains a \f(CW\*(C`hashref\*(C'\fR mapping Distribution names to path names for dist_dir style share dirs. The same limitation applied to \f(CW\*(C`\-module\*(C'\fR applies here.
.PP
.Vb 5
\&  \-share => {
\&    \-dist => { \*(AqMy\-Dist\*(Aq => \*(Aqshare/mydist\*(Aq }
\&  }
\&  ...
\&  dist_dir(\*(AqMy\-Dist\*(Aq)
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Kent Fredric <kentnl@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
